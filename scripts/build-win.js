#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('ü™ü ÂºÄÂßãÊûÑÂª∫ Windows ÁâàÊú¨...');

// Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫
console.log('üßπ Ê∏ÖÁêÜ‰πãÂâçÁöÑÊûÑÂª∫Êñá‰ª∂...');
if (fs.existsSync('release')) {
  execSync('rm -rf release', { stdio: 'inherit' });
}
if (fs.existsSync('dist')) {
  execSync('rm -rf dist', { stdio: 'inherit' });
}

try {
  // ÊûÑÂª∫Â∫îÁî®
  console.log('üî® ÂºÄÂßãÊûÑÂª∫Â∫îÁî®...');
  execSync('npm run build', { stdio: 'inherit' });

  // Âè™‰∏∫ Windows ÊâìÂåÖ
  console.log('üì¶ ÂºÄÂßãÊâìÂåÖ Windows ÁâàÊú¨...');
  execSync('npx electron-builder --win --x64 --arm64', { 
    stdio: 'inherit',
    env: { 
      ...process.env, 
      NODE_ENV: 'production'
    }
  });

  console.log('‚úÖ Windows ÊûÑÂª∫ÂÆåÊàêÔºÅ');
  console.log('üìÅ ËæìÂá∫ÁõÆÂΩï: release/');
  
  // ÊòæÁ§∫ÁîüÊàêÁöÑÊñá‰ª∂Â§ßÂ∞è
  const releaseDir = path.join(__dirname, '../release');
  if (fs.existsSync(releaseDir)) {
    const files = fs.readdirSync(releaseDir);
    console.log('\nüìä ÁîüÊàêÁöÑÂÆâË£ÖÂåÖ:');
    files.forEach(file => {
      if (file.endsWith('.exe') || file.endsWith('.zip')) {
        const filePath = path.join(releaseDir, file);
        const stats = fs.statSync(filePath);
        const sizeInMB = (stats.size / (1024 * 1024)).toFixed(2);
        console.log(`  - ${file}: ${sizeInMB} MB`);
      }
    });
  }

} catch (error) {
  console.error('‚ùå ÊûÑÂª∫Â§±Ë¥•:', error.message);
  process.exit(1);
} 